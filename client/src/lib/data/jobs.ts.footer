];

export const getProfession = (id: string): Profession | undefined => {
  return professions.find(p => p.id === id);
};

export const getJobByLevelInProfession = (professionId: string, level: JobLevel): CareerPath | undefined => {
  const profession = getProfession(professionId);
  if (!profession) return undefined;
  
  return profession.careerPath.find(job => job.level === level);
};

export const getNextJobInCareerPath = (professionId: string, currentLevel: JobLevel): CareerPath | undefined => {
  const profession = getProfession(professionId);
  if (!profession) return undefined;
  
  const levels: JobLevel[] = ['entry', 'junior', 'mid', 'senior', 'executive'];
  const currentLevelIndex = levels.indexOf(currentLevel);
  
  if (currentLevelIndex < 0 || currentLevelIndex >= levels.length - 1) {
    return undefined; // Invalid level or already at highest level
  }
  
  const nextLevel = levels[currentLevelIndex + 1];
  return profession.careerPath.find(job => job.level === nextLevel);
};

export const getProfessionsByCategory = (category: JobCategory): Profession[] => {
  return professions.filter(p => p.category === category);
};

export const getAllProfessionCategories = (): JobCategory[] => {
  return [
    'technology',
    'finance',
    'healthcare',
    'education',
    'creative',
    'business',
    'legal',
    'science',
    'government',
    'trade'
  ];
};

export const getCategoryLabel = (category: JobCategory): string => {
  return {
    'technology': 'Technology',
    'finance': 'Finance',
    'healthcare': 'Healthcare',
    'education': 'Education',
    'creative': 'Creative',
    'management': 'Management',
    'legal': 'Legal',
    'science': 'Science & Research',
    'government': 'Government & Public Sector',
    'trade': 'Skilled Trades'
  }[category];
};

export const getJobLevelLabel = (level: JobLevel): string => {
  return {
    'entry': 'Entry Level',
    'junior': 'Junior',
    'mid': 'Mid Level',
    'senior': 'Senior',
    'executive': 'Executive'
  }[level];
};

export const meetsSkillRequirements = (
  skills: CharacterSkills, 
  requirements: Partial<CharacterSkills>
): boolean => {
  // Check each required skill to see if the character meets the requirement
  for (const [skillName, requiredLevel] of Object.entries(requirements)) {
    // Need to use this approach because TypeScript doesn't allow direct string indexing
    // of objects with specific key types
    const characterSkillLevel = skills[skillName as keyof CharacterSkills];
    if (characterSkillLevel < requiredLevel) {
      return false;
    }
  }
  return true;
};

export const calculateMonthsToSkillRequirements = (
  skills: CharacterSkills,
  requirements: Partial<CharacterSkills>,
  monthlySkillGains: Partial<CharacterSkills>
): number => {
  let maxMonths = 0;
  
  for (const [skillName, requiredLevel] of Object.entries(requirements)) {
    const characterSkillLevel = skills[skillName as keyof CharacterSkills];
    const skillGainPerMonth = monthlySkillGains[skillName as keyof CharacterSkills] || 0;
    
    if (characterSkillLevel < requiredLevel) {
      // Calculate how many months it will take to reach the required level
      if (skillGainPerMonth <= 0) {
        return Infinity; // Cannot reach the required level if not gaining skill
      }
      
      const skillDeficit = requiredLevel - characterSkillLevel;
      const monthsToRequirement = Math.ceil(skillDeficit / skillGainPerMonth);
      
      maxMonths = Math.max(maxMonths, monthsToRequirement);
    }
  }
  
  return maxMonths;
};
