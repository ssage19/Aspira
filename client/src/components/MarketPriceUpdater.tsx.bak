import { useEffect, useCallback, useRef } from 'react';
import { useEconomy } from '../lib/stores/useEconomy';
import { useTime } from '../lib/stores/useTime';
import useAssetTracker from '../lib/stores/useAssetTracker';
import { useCharacter, Asset, Property } from '../lib/stores/useCharacter';
import { VolatilityLevel } from '../lib/data/investments';
import { expandedStockMarket } from '../lib/data/sp500Stocks';

// Extend Asset type with possible additional properties
interface ExtendedAsset extends Asset {
  faceValue?: number;
  currentValue?: number;
  mortgage?: number;
}

// Ensure Property type has the fields we need
interface PropertyWithLoan extends Property {
  loanAmount: number;
  currentValue: number;
}

/**
 * MarketPriceUpdater - Background component that updates asset prices
 * 
 * This component handles periodic updates of all asset prices in the game,
 * ensuring that investments are properly valued regardless of which
 * screen the player is viewing.
 */
export function MarketPriceUpdater() {
  const { marketTrend, stockMarketHealth } = useEconomy();
  const { currentDay } = useTime();
  const assetTracker = useAssetTracker();
  const { assets, syncAssetsWithAssetTracker } = useCharacter();
  
  // Ref to prevent too frequent updates
  const lastUpdateTimeRef = useRef<number>(Date.now());

  // Helper functions (memoized to avoid recreation)
  const getVolatilityFactor = useCallback((volatility: string): number => {
    switch (volatility as VolatilityLevel) {
      case 'extreme': return 0.7;
      case 'very_high': return 0.5;
      case 'high': return 0.3;
      case 'medium': return 0.2;
      case 'low': return 0.1;
      case 'very_low': return 0.05;
      default: return 0.05; // Default for unknown volatility
    }
  }, []);
  
  // Helper function to get market factor based on market trend
  const getMarketFactor = useCallback((trend: string): number => {
    if (trend === 'bull') return 1.05;
    if (trend === 'bear') return 0.95;
    return 1.0; // stable
  }, []);

  // Occasional updates to lifestyle item values (very low volatility)
  const updateLifestyleItems = useCallback(() => {
    // Only update very rarely (5% chance per update)
    if (Math.random() > 0.05) return;
    
    // Get all lifestyle items directly from character state
    const { lifestyleItems } = useCharacter.getState();
    
    if (!lifestyleItems || lifestyleItems.length === 0) return;
    
    // Only update permanent items (not vacations or experiences)
    const permanentItems = lifestyleItems.filter(
      item => item.type !== 'vacations' && item.type !== 'experiences'
    );
    
    if (permanentItems.length === 0) return;
    
    console.log("MarketPriceUpdater: Updating", permanentItems.length, "lifestyle item values");
    
    // Lifestyle items generally depreciate slightly over time with occasional market effects
    const marketInfluence = marketTrend === 'bull' ? 1.005 : marketTrend === 'bear' ? 0.998 : 1.0;
    
    permanentItems.forEach(item => {
      if (!item || !item.purchasePrice) return;
      
      // Extremely low volatility for lifestyle items
      const volatilityFactor = 0.01;
      const randomFactor = (Math.random() * volatilityFactor * 2) - volatilityFactor;
      
      // Most lifestyle items depreciate slightly over time
      const depreciationFactor = 0.998; // Very slow depreciation
      
      // Calculate new value with depreciation and market effects
      const baseValue = item.purchasePrice;
      const newValue = baseValue * depreciationFactor * marketInfluence * (1 + randomFactor);
      const formattedValue = parseFloat(newValue.toFixed(2));
      
      // Update the item value in asset tracker (if it has meaningful value)
      if (assetTracker.updateLifestyleItem && formattedValue > 10) {
        assetTracker.updateLifestyleItem(
          item.id,
          formattedValue
        );
        
        console.log(`MarketPriceUpdater: Updated ${item.name} value to $${formattedValue.toFixed(2)}`);
      }
    });
  }, [assetTracker, marketTrend]);
  
  // Update crypto asset prices
  const updateCryptoAssets = useCallback(() => {
    // Get all owned crypto from character assets
    const ownedCrypto = assets.filter(asset => asset.type === 'crypto');
    
    if (ownedCrypto.length === 0) return;
    
    console.log("MarketPriceUpdater: Updating", ownedCrypto.length, "crypto assets");
    
    // For each owned crypto, update its price with some randomness and market influence
    ownedCrypto.forEach(crypto => {
      if (!crypto || crypto.quantity <= 0) return;
      
      // Higher volatility for crypto compared to stocks
      const volatilityFactor = 0.8; // Crypto is highly volatile
      const marketInfluence = marketTrend === 'bull' ? 1.08 : marketTrend === 'bear' ? 0.92 : 1;
      
      // Calculate price change with randomness
      const basePrice = crypto.purchasePrice;
      const randomFactor = (Math.random() * volatilityFactor * 2) - volatilityFactor;
      const newPrice = basePrice * marketInfluence * (1 + randomFactor);
      
      // Ensure price doesn't go too low
      const finalPrice = Math.max(newPrice, basePrice * 0.2);
      
      // Update the asset tracker
      assetTracker.updateCrypto(crypto.id, crypto.quantity, parseFloat(finalPrice.toFixed(2)));
      
      console.log(`MarketPriceUpdater: Updated ${crypto.name} price to $${finalPrice.toFixed(2)}`);
    });
  }, [assets, assetTracker, marketTrend]);
  
  // Update bond prices (bonds are more stable but still affected by interest rates)
  const updateBonds = useCallback(() => {
    // Get all owned bonds
    const ownedBonds = assets.filter(asset => asset.type === 'bond');
    
    if (ownedBonds.length === 0) return;
    
    console.log("MarketPriceUpdater: Updating", ownedBonds.length, "bonds");
    
    // Bonds are affected by market trends but much less than stocks
    const marketInfluence = marketTrend === 'bull' ? 1.01 : marketTrend === 'bear' ? 0.99 : 1;
    
    ownedBonds.forEach(bond => {
      if (!bond || bond.quantity <= 0) return;
      
      // Bonds are very stable, small random fluctuation
      const volatilityFactor = 0.02;
      const randomFactor = (Math.random() * volatilityFactor * 2) - volatilityFactor;
      
      // Calculate new price - use maturityValue if available, otherwise use purchasePrice
      const extendedBond = bond as ExtendedAsset;
      const baseValue = extendedBond.maturityValue || bond.purchasePrice;
      const newPrice = baseValue * marketInfluence * (1 + randomFactor);
      
      // Update the bond in the asset tracker
      assetTracker.updateBond(bond.id, bond.quantity, parseFloat(newPrice.toFixed(2)));
      
      console.log(`MarketPriceUpdater: Updated ${bond.name} price to $${newPrice.toFixed(2)}`);
    });
  }, [assets, assetTracker, marketTrend]);
  
  // Update other investment types
  const updateOtherInvestments = useCallback(() => {
    // Get all other investments - only those of type "other"
    const otherInvestments = assets.filter(asset => asset.type === 'other');
    
    if (otherInvestments.length === 0) return;
    
    console.log("MarketPriceUpdater: Updating", otherInvestments.length, "other investments");
    
    // Different investment types have different volatility profiles
    otherInvestments.forEach(investment => {
      if (!investment || investment.quantity <= 0) return;
      
      // Default moderate volatility
      const volatilityFactor = 0.15;
      const marketInfluence = marketTrend === 'bull' ? 1.03 : marketTrend === 'bear' ? 0.97 : 1;
      
      // Calculate new price with some randomness
      const basePrice = investment.purchasePrice;
      const randomFactor = (Math.random() * volatilityFactor * 2) - volatilityFactor;
      const newPrice = basePrice * marketInfluence * (1 + randomFactor);
      
      // Update the asset in the tracker
      if (assetTracker.updateOtherInvestment) {
        // updateOtherInvestment only takes id and currentValue (not quantity)
        assetTracker.updateOtherInvestment(
          investment.id, 
          parseFloat(newPrice.toFixed(2))
        );
        
        console.log(`MarketPriceUpdater: Updated ${investment.name} price to $${newPrice.toFixed(2)}`);
      }
    });
  }, [assets, assetTracker, marketTrend]);
  
  // Occasionally update property values (real estate changes more slowly)
  const updatePropertyValues = useCallback(() => {
    // Only update property values occasionally (10% chance per update)
    if (Math.random() > 0.1) return;
    
    // Get properties directly from character state
    const { properties } = useCharacter.getState();
    
    if (!properties || properties.length === 0) return;
    
    console.log("MarketPriceUpdater: Updating", properties.length, "property values");
    
    // Real estate market is affected by overall market but moves more slowly
    const marketInfluence = marketTrend === 'bull' ? 1.01 : marketTrend === 'bear' ? 0.995 : 1.002;
    
    properties.forEach(property => {
      if (!property) return;
      
      // Cast to PropertyWithLoan to access the specific property fields
      const propertyWithLoan = property as PropertyWithLoan;
      
      // Properties have low volatility
      const volatilityFactor = 0.02;
      const randomFactor = (Math.random() * volatilityFactor * 2) - volatilityFactor;
      
      // Calculate new property value with small adjustment
      const currentPropertyValue = propertyWithLoan.currentValue || property.purchasePrice;
      const newValue = currentPropertyValue * marketInfluence * (1 + randomFactor);
      const formattedValue = parseFloat(newValue.toFixed(2));
      
      // Update the property value in asset tracker
      if (assetTracker.updateProperty) {
        assetTracker.updateProperty(
          property.id,
          formattedValue,
          propertyWithLoan.loanAmount || 0
        );
        
        console.log(`MarketPriceUpdater: Updated ${property.name} value to $${formattedValue.toFixed(2)}`);
      }
    });
  }, [assetTracker, marketTrend]);

  // Function to update other asset types (crypto, property values, etc.)
  const updateOtherAssetPrices = useCallback(() => {
    // Update crypto assets
    updateCryptoAssets();
    
    // Update bonds
    updateBonds();
    
    // Update other investments
    updateOtherInvestments();
    
    // Update property values (occasional small adjustments)
    updatePropertyValues();
    
    // Update lifestyle items (rarely changes in value)
    updateLifestyleItems();
    
    // After updating all assets, force a recalculation of totals
    assetTracker.recalculateTotals();
  }, [updateCryptoAssets, updateBonds, updateOtherInvestments, updatePropertyValues, updateLifestyleItems, assetTracker]);
  
  // Function to update asset tracker stock prices
  const syncAssetTrackerStockPrices = useCallback((prices: Record<string, number>) => {
    // Get all owned stocks from character assets
    const ownedStocks = assets.filter(asset => asset.type === 'stock');
    
    // Debug log the stocks and prices being updated
    console.log("MarketPriceUpdater: Syncing prices for", ownedStocks.length, "stocks");
    
    // For each owned stock, update its price in the asset tracker
    ownedStocks.forEach(stock => {
      const currentPrice = prices[stock.id] || stock.currentPrice || stock.purchasePrice;
      
      // Only update if we have a valid price and quantity
      if (currentPrice > 0 && stock.quantity > 0) {
        // Update the stock's current price in the asset tracker
        assetTracker.updateStock(stock.id, stock.quantity, currentPrice);
        
        console.log(`MarketPriceUpdater: Updated ${stock.name} price to $${currentPrice.toFixed(2)}`);
      }
    });
  }, [assets, assetTracker]);

  // Helper to check if a date is a weekday (Monday-Friday)
  const isWeekday = useCallback((date: Date): boolean => {
    const day = date.getDay();
    return day >= 1 && day <= 5; // Monday is 1, Friday is 5
  }, []);
  
  // Check if the market is open (both weekday and within trading hours)
  const isMarketOpen = useCallback((): boolean => {
    // Get the current game time state
    const timeState = useTime.getState();
    
    // Check day of week first (most important)
    const gameDate = new Date();
    gameDate.setFullYear(timeState.currentYear);
    gameDate.setMonth(timeState.currentMonth - 1); // JS months are 0-indexed
    gameDate.setDate(timeState.currentDay);
    
    // First check if it's a weekday
    const dayOfWeek = gameDate.getDay(); // 0 = Sunday, 6 = Saturday
    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
    
    if (isWeekend) {
      console.log(`Market closed: Weekend (${dayOfWeek === 0 ? 'Sunday' : 'Saturday'})`);
      return false;
    }
    
    // Calculate current hour from timeProgress (0-23 range)
    const hoursFraction = (timeState.timeProgress / 100) * 24;
    const currentHour = Math.floor(hoursFraction);
    const isWithinTradingHours = currentHour >= 9 && currentHour < 16;
    
    if (!isWithinTradingHours) {
      console.log(`Market closed: Outside trading hours (${currentHour}:00)`);
      return false;
    }
    
    console.log(`Market open: Weekday during trading hours (${dayOfWeek}, ${currentHour}:00)`);
    return true;
  }, []);
  
  // Export this function to the global window object for use in other components
  useEffect(() => {
    // Save both functions for different use cases
    (window as any).isWeekday = isWeekday;
    (window as any).isMarketOpen = isMarketOpen;
    
    // Also save the current market status to a global variable for other components to access
    (window as any).isStockMarketOpen = isMarketOpen;
    
    return () => {
      delete (window as any).isWeekday;
      delete (window as any).isMarketOpen;
      delete (window as any).isStockMarketOpen;
    };
  }, [isWeekday, isMarketOpen]);
  
  // Create a stable reference to the update function that doesn't change on renders
  const updateAllPrices = useCallback(() => {
    const now = Date.now();
    
    // Prevent updates that happen too frequently (minimum 1 second between updates)
    if (now - lastUpdateTimeRef.current < 1000) {
      console.log("MarketPriceUpdater: Skipping update - too soon since last update");
      return;
    }
    
    // Update the last update time
    lastUpdateTimeRef.current = now;
    
    // Check if market is currently open for stock updates
    const marketOpen = isMarketOpen();
    
    console.log(`MarketPriceUpdater: Running global price update. Market ${marketOpen ? 'OPEN' : 'CLOSED'} right now.`);
    console.log("MarketPriceUpdater: Forcing update regardless of market status (DEBUG FIX)");
    
    // 1. Calculate updated stock prices based on market conditions
    const updatedStockPrices: Record<string, number> = {};
    
    // We are forcing stock price updates to happen even when market is closed
    // This is to ensure prices always update even if there's an issue with market status detection
    // Always calculate prices regardless of market state
    expandedStockMarket.forEach(stock => {
      // Base price influenced by market health and stock volatility
      const volatilityFactor = getVolatilityFactor(stock.volatility);
      const marketFactor = getMarketFactor(marketTrend);
      const timeFactor = Math.sin(currentDay / 30 * Math.PI) * volatilityFactor;
      
      // Calculate new price with some randomness
      let newPrice = stock.basePrice * marketFactor;
      newPrice += newPrice * timeFactor;
      newPrice += newPrice * (Math.random() * volatilityFactor - volatilityFactor/2);
      
      // Ensure price doesn't go too low
      newPrice = Math.max(newPrice, stock.basePrice * 0.1);
      
      updatedStockPrices[stock.id] = parseFloat(newPrice.toFixed(2));
    });
    
    // 2. Update asset tracker with the new prices for owned assets
    syncAssetTrackerStockPrices(updatedStockPrices);
    
    // Log market status for debugging
    if (!marketOpen) {
      // More specific message based on the reason for being closed
      const timeState = useTime.getState();
      const gameDate = new Date();
      gameDate.setFullYear(timeState.currentYear);
      gameDate.setMonth(timeState.currentMonth - 1);
      gameDate.setDate(timeState.currentDay);
      
      const dayOfWeek = gameDate.getDay();
      const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
      
      if (isWeekend) {
        console.log(`MarketPriceUpdater: Stock market closed (weekend - ${dayOfWeek === 0 ? 'Sunday' : 'Saturday'})`);
      } else {
        // It must be a weekday outside of trading hours
        const hoursFraction = (timeState.timeProgress / 100) * 24;
        const currentHour = Math.floor(hoursFraction);
        console.log(`MarketPriceUpdater: Stock market closed (outside trading hours - ${currentHour}:00)`);
      }
    }
    
    // 3. Update other asset types
    updateOtherAssetPrices();
    
    // 4. Critical: Make sure character state is synced with asset tracker
    // This ensures Dashboard and Investment pages show the same values
    syncAssetsWithAssetTracker();
    
    // 5. Final step: Force a recalculation of all totals
    // We don't need to immediately call forceUpdate after recalculateTotals
    // as the recalculateTotals function already updates the lastUpdated timestamp
    assetTracker.recalculateTotals();
    
  }, [
    currentDay, 
    marketTrend, 
    stockMarketHealth, 
    assetTracker, 
    syncAssetsWithAssetTracker, 
    getVolatilityFactor, 
    getMarketFactor,
    syncAssetTrackerStockPrices,
    updateOtherAssetPrices,
    isMarketOpen
  ]);

  // Add this function to global window object so it can be called from anywhere
  // This creates a consistent way to refresh prices across components
  useEffect(() => {
    // Add the function to window for global access
    (window as any).globalUpdateAllPrices = updateAllPrices;
    
    return () => {
      // Clean up when component unmounts
      delete (window as any).globalUpdateAllPrices;
    };
  }, [updateAllPrices]);

  // Update all market prices on a regular interval 
  // AND whenever game time changes significantly
  useEffect(() => {
    console.log("Market price updater initializing...");
    
    // Run the update immediately
    updateAllPrices();
    
    // Set up an interval to run updates periodically (every 5 seconds)
    const updateInterval = setInterval(updateAllPrices, 5000);
    
    // Additionally, subscribe to game time changes to update prices 
    // when crossing from before market hours to during, or during to after
    const unsubscribeTimeProgress = useTime.subscribe(
      (state) => state.timeProgress,
      (newProgress, prevProgress) => {
        // Calculate hours from progress
        const newHour = Math.floor((newProgress / 100) * 24);
        const prevHour = Math.floor((prevProgress / 100) * 24);
        
        // Check if we've crossed any market hour boundaries
        if (
          (newHour >= 9 && prevHour < 9) || // Market opening
          (newHour >= 16 && prevHour < 16)   // Market closing
        ) {
          console.log(`MarketPriceUpdater: Time boundary crossed (${prevHour}:00 -> ${newHour}:00), updating prices`);
          updateAllPrices();
        }
      }
    );
    
    // Also subscribe to date changes to handle weekend transitions
    const unsubscribeDay = useTime.subscribe(
      (state) => state.currentDay,
      () => {
        console.log("MarketPriceUpdater: Day changed, updating prices");
        updateAllPrices();
      }
    );
    
    // Clean up the interval and subscriptions when component unmounts
    return () => {
      console.log("MarketPriceUpdater: Cleaning up price update interval and subscriptions");
      clearInterval(updateInterval);
      unsubscribeTimeProgress();
      unsubscribeDay();
    };
  }, [updateAllPrices]);
  
  // This component doesn't render anything - it just runs in the background
  return null;
}